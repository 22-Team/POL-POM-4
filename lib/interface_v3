#!/bin/bash

# Copyright (C) 2007-2010 PlayOnLinux Team
# Copyright (C) 2011 Pâris Quentin

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. 

POL_Tools_GenID() # On génère un ID unique pour notre fenêtre
{
	N_LETTRES="$1"

	if [ "$1" != "" ]
	then
	N_LETTRES=$1
	fi
	ALPHA='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'

	MOT=""
	i=0
	while ((i < $N_LETTRES));
	do
	CHIFFRE=$(( $RANDOM % ${#ALPHA}));
	printf ${ALPHA:$CHIFFRE:1};
	(( i=i+1 ))
	done
}
export POL_SetupWindow_ID=$$ # Au moins 100000 fois plus logique, et plus simple

POL_SetupWindow_presentation ()
{
	[ "$3" = "" ] || url="($3)" 
	POL_SetupWindow_free_presentation "$(eval_gettext "Welcome to $APPLICATION_TITLE's Installation Wizard.")" "$(eval_gettext 'This wizard will help you install ')$1$(eval_gettext ' on your computer.')\n\n$(eval_gettext 'This program was created by: ')$2\n$url\n\n$(eval_gettext 'This installation program is provided by: ')$4\n\n$1$(eval_gettext ' will be installed in: ')$REPERTOIRE/wineprefix/$5$(eval_gettext "\n\n$APPLICATION_TITLE is not responsable for anything that might happen as a result of using these scripts.\n\n")$(eval_gettext 'Click Next to start')"

}
POL_SetupWindow_free_presentation ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
free_presentation
$1
$2
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	fi
}
POL_SetupWindow_message ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
message
$1
$2
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	fi
}
POL_SetupWindow_missing ()
{
	if [ "$MANQUE" = "true" ]
	then
		LNG_MISSING_ERROR=$(eval_gettext "One or more program(s) are missing. Please install them and run the script again.")

		POL_SetupWindow_message "$LNG_MISSING_ERROR\n\n$MISSING" "$(eval_gettext Error)"
		POL_SetupWindow_Close
		exit $EXIT_MISSING
	fi
}
POL_SetupWindow_licence ()
{

if [ -f "$3" ]
then
		TIMESTAMP="$(date +%s)"
		cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
licence
$1
$2
$3
$TIMESTAMP
EOF
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		while [ ! "$MESSAGE" = "MsgOut" ]
		do
			MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
			sleep 0.1
		done
		MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
		if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
		then
			rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
			exit 
		fi
	fi
}
POL_SetupWindow_message_image ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
message #_image # FIXME !
$1
$2
#$3
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	fi
}
POL_SetupWindow_wait_next_signal ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
attendre_signal
$1
$2
$TIMESTAMP
EOF
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		exit 
	fi
}
POL_SetupWindow_pulsebar ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
pulsebar
$1
$2
$TIMESTAMP
EOF
	sleep 0.2 #sleeping 0.2 GUI have to read dialog file. see bug #30
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		exit 
	fi
}
POL_SetupWindow_pulse ()
{
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
pulse
$1
EOF
	sleep 0.2 #sleeping 0.2 GUI have to read dialog file. see bug #30
}
POL_SetupWindow_set_text ()
{
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
set_text
$1
EOF
	sleep 0.2 #sleeping 0.2 GUI have to read dialog file. see bug #30
}
POL_SetupWindow_wait ()
{
	POL_SetupWindow_wait_next_signal "$@"
}
POL_SetupWindow_download () # /!\ Scriptors should directly use POL_Download
{
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
download
$1
$2
$3
$(pwd)/
EOF
	sleep 0.2
	DOWNLOADEDFILE=`cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | head -n5 | tail -n1`
	DOWNLOADSERVER=`echo $DOWNLOADEDFILE | cut -d/ -f3`
	DOWNLOADEDFILE=$(basename "$DOWNLOADEDFILE")

	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		exit 
	fi
}
POL_SetupWindow_detect_exit ()
{
	POL_Debug_Warning "POL_SetupWindow_detect_exit is deprecated"
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	fi
}
POL_SetupWindow_textbox ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
champ
$1
$2
$3
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	else
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_VALUE=')
		MESSAGE_TER=${MESSAGE_TER:10}
		export APP_ANSWER="$MESSAGE_TER"
	fi
}
POL_SetupWindow_browse ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
browse
$1
$2
$3
$PWD
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	else
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_VALUE=')
		MESSAGE_TER=${MESSAGE_TER:10}
		export APP_ANSWER="$MESSAGE_TER"
	fi
}
POL_SetupWindow_question ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
question
$1
$2
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	else
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_QUESTION=')
		MESSAGE_TER=${MESSAGE_TER:13}
		export APP_ANSWER="$MESSAGE_TER"
	fi
}
POL_SetupWindow_menu ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
menu
$1
$2
$3
$4
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	else
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_VALUE=')
		MESSAGE_TER=${MESSAGE_TER:10}
		export APP_ANSWER="$MESSAGE_TER"
	fi
}
POL_SetupWindow_icon_menu ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
menu_icons
$1
$2
$3
$4
$5
$6
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	else
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_VALUE=')
		MESSAGE_TER=${MESSAGE_TER:10}
		export APP_ANSWER="$MESSAGE_TER"
	fi
}
POL_SetupWindow_checkbox_list ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
checkbox_list
$1
$2
$3
$4
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	else
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_VALUE=')
		MESSAGE_TER=${MESSAGE_TER:10}
		export APP_ANSWER="$MESSAGE_TER"
	fi
}
POL_SetupWindow_menu_num ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
menu_num
$1
$2
$3
$4
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	else
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_VALUE=')
		MESSAGE_TER=${MESSAGE_TER:10}
		export APP_ANSWER="$MESSAGE_TER"
	fi
}
POL_SetupWindow_menu_list ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
menu_list
$1
$2
$3
$4
$5
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	else
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_VALUE=')
		MESSAGE_TER=${MESSAGE_TER:10}
		export APP_ANSWER="$MESSAGE_TER"
	fi
}
POL_SetupWindow_games ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
get_games
$1
$2
$3
$4
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	else
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_VALUE=')
		MESSAGE_TER=${MESSAGE_TER:10}
		export APP_ANSWER="$MESSAGE_TER"
	fi
}
POL_SetupWindow_prefix_selector ()
{
	TIMESTAMP="$(date +%s)"
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
get_prefixes
$1
$TITLE
$TIMESTAMP
EOF
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$') 
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=')
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	else
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_VALUE=')
		MESSAGE_TER=${MESSAGE_TER:10}
		KINDOF="$(echo $MESSAGE_TER | cut -d";" -f1)" 
		VALUE="$(echo $MESSAGE_TER | cut -d";" -f2)" 
		if [ "$KINDOF" = "2" ]
		then
			export APP_ANSWER="$VALUE"
		else
			export APP_ANSWER="$(POL_Shortcut_GetPrefix "$VALUE")"
		fi
	fi
}
POL_SetupWindow_specialprefixcreate ()
{
	POL_SetupWindow_wait_next_signal "$(eval_gettext 'Please wait while the virtual drive is being created...')" "$TITLE"
	wine wineprefixcreate
	sleep 2
	set_user_dir
	set_programfile_dir
	POL_SetupWindow_detect_exit
}
POL_SetupWindow_oldprefixcreate ()
{
	POL_SetupWindow_wait_next_signal "$(eval_gettext 'Please wait while the virtual drive is being created...')" "$TITLE"
	wine wineprefixcreate
	POL_SetupWindow_detect_exit
}
POL_SetupWindow_prefixcreate ()
{
	POL_Debug_Message "Creating prefix : $WINEPREFIX"
	POL_SetupWindow_normalprefixcreate
	POL_LoadVar_PROGRAMFILES
	sleep 5 # Pour que les fichiers .reg soient crées
}
POL_SetupWindow_normalprefixcreate()
{
	sleep 1
	POL_SetupWindow_wait_next_signal "$(eval_gettext 'Please wait while the virtual drive is being created...')" "$TITLE"
	wine wineboot
}

CleanLnkDesktop()
{
	mkdir -p "$REPERTOIRE/backup"
	for file in $HOME/Desktop/*.desktop
	do
		if [ ! "$(strings "$file" | grep PlayOnMac)" = "" ]
		then
			mv "$file" "$REPERTOIRE/backup"
		fi
	done
	for file in $HOME/Desktop/*.lnk
	do
		if [ ! "$(strings "$file" | grep PlayOnMac)" = "" ]
		then
			mv "$file" "$REPERTOIRE/backup"
		fi
	done
}
POL_SetupWindow_AutoApp()
{
	POL_Debug_Message "Making .app $PACKAGE ($shortname)" 
	shortname=`echo "$1" | tr -c [[a-zA-Z0-9]\.] '_'`
	PACKAGE="$1"
	DIRAPP="$HOME/Desktop/$PACKAGE.app"
	POL_SetupWindow_wait_next_signal ""$(eval_gettext "Making shortcut...")"" "$TITLE"
	make_skeleton "$PACKAGE"
	make_icon "$PACKAGE"
	make_pom_script "$PACKAGE"
	make_plist "$PACKAGE" "$shortname"
	CleanLnkDesktop
}

POL_SetupWindow_make_shortcut()
{
	# 1 = Wineprefix
	# 2 = Repertoire
	# 3 = Binaire
	# 4 = Icone (png ou xpm)
	# 5 = Nom de l'icône
	# 6 = Ignoré (question de compatibilité avec les versions < 2.0)
	# 7 = Eventuel argument
	creer_lanceur_base "$@"

	if [ "$POL_OS" = "Mac" ] # Ouai, la c'est complètement différent sous linux et sous mac
	then
		if [ "$5" = "" ]
		then
			POL_SetupWindow_AutoApp "$1" "$1"
		else
			POL_SetupWindow_AutoApp "$5" "$1"
		fi
	
	else

		if [ -f "$REPERTOIRE/icones/full_size/$NOMICONE_" ]; then # L'icone existe...
			iconPath="$REPERTOIRE/icones/full_size/$NOMICONE_"
		else
			iconPath="$PLAYONLINUX/etc/playonlinux.png"
		fi
		generer_icone "$iconPath" "$NOMICONE_" "$DESKTOP" "$PLAYONLINUX/playonlinux --run \"$NOMICONE_\"" "$NOMICONE_"
	fi
}

POL_SetupError()
{
	POL_SetupWindow_message "$1\n\nAborting." "Error"
	POL_SetupWindow_Close
	exit
}

POL_ExtractIcon()
{
	# 1 = Exe
	# 2 = Destination

	POL_Debug_Warning "Function is deprecated"
	
	mkdir -p "$REPERTOIRE/tmp/win32Icon"
	cd "$REPERTOIRE/tmp/win32Icon"
	wrestool -x -t14 "$1" &> icons-brut

	icotool -x "icons-brut" -o "$REPERTOIRE/tmp/win32Icon/"
	find . -name "*32x32x32.png" > icons-list
	find . -name "*32x32x16.png" >> icons-list
	find . -name "*32x32x8.png" >> icons-list
	find . -name "*32x32x4.png" >> icons-list
	ICON_FILE=$(cat "icons-list" | head -n 1)
	[ "$ICON_FILE" != "" ] && [ -s "$ICON_FILE" ] && cp "$ICON_FILE" "$2" || POL_Debug_Warning "Icon was not extracted"

	rm -r "$REPERTOIRE/tmp/win32Icon"
}
POL_SetupWindow_auto_shortcut()
{
	# 1 = Wineprefix
	# 2 = Binaire
	# 3 = Nom du raccourics
	# 4 = Icone
	# 5 = Eventuel argument
	POL_Debug_Warning "POL_SetupWindow_auto_shortcut is deprecated"
	Binaire="$2"
	SpecialArg="$5"
	
	if [ "$3" = "" ]
	then
		NOMICONE_="$1"
	else
		NOMICONE_="$3"
	fi
	
	mkdir -p "$REPERTOIRE/icones/32"
	mkdir -p "$REPERTOIRE/icones/full_size"
	
	ICON_WEB_NAME="$4"
	ICON_OK=0

	## On chope le dossier du binaire
	cd "$REPERTOIRE/wineprefix/$1" || POL_SetupError "Prefixe $1 does not exists"
	cd drive_c || POL_SetupError "drive_c folder does not exists"
	binary_path=$(find ./ -iname "$Binaire" | tail -n 1)
	binary_dir=$(dirname "$binary_path")
	Binaire=$(basename "$binary_path")
	[ "$binary_dir" = "" ] && POL_SetupError "Can't find $Binaire"

	if [ -n "$ICON_WEB_NAME" ]; then
		if [ ! "$OFFLINE" = "1" ]; then # On peut le télécharger...
			wget -q "$SITE/icones/$ICON_WEB_NAME" -O- > "$REPERTOIRE/icones/full_size/$NOMICONE_" || rm "$REPERTOIRE/icones/full_size/$NOMICONE_"  # On prend l'icone full size
		fi
		
		if [ -f "$REPERTOIRE/icones/full_size/$NOMICONE_" ]; then
			convert -resize 32 "$REPERTOIRE/icones/full_size/$NOMICONE_" "$REPERTOIRE/icones/32/$NOMICONE_" # On fabrique l'icone 32*32
			ICON_OK=1
		fi
	elif [ "$ICON_OK" -ne 1 ]; then # Pas d'incone sur le web => Création à partir de l'exe...
		echo "No internet icon..."
		
		POL_ExtractIcon "$REPERTOIRE/wineprefix/$1/drive_c/$binary_dir/$Binaire" "$REPERTOIRE/icones/32/$NOMICONE_"
			
		# On ne crée pas d'icone "full_size", parce que les résolutions des icones windows ne sont pas suffisantes tout le temps.
		# Pour verifier la taille des icones, il faudrait utiliser "identify", mais ce programme n'est pas toujours fournis.
	fi

	## On génère le binaire 
	echo "#!/bin/bash" > "$REPERTOIRE/configurations/installed/$NOMICONE_"
	echo "export WINEPREFIX=\"$REPERTOIRE/wineprefix/$1\"" >> "$REPERTOIRE/configurations/installed/$NOMICONE_"
	echo "export WINEDEBUG=\"-all\"" >> "$REPERTOIRE/configurations/installed/$NOMICONE_"
	echo "cd \"$REPERTOIRE/wineprefix/$1/drive_c/$binary_dir\"" >> "$REPERTOIRE/configurations/installed/$NOMICONE_"
	echo "wine \"$Binaire\" $SpecialArg \$@" >> "$REPERTOIRE/configurations/installed/$NOMICONE_"
	chmod +x "$REPERTOIRE/configurations/installed/$NOMICONE_"
	if [ "$POL_OS" = "Mac" ]
	then
		POL_SetupWindow_AutoApp "$3" "$1"
	else
		if [ -f "$REPERTOIRE/icones/full_size/$NOMICONE_" ]; then # L'icone existe...
			iconPath="$REPERTOIRE/icones/full_size/$NOMICONE_"
		else
			iconPath="$PLAYONLINUX/etc/playonlinux.png"
		fi
		generer_icone "$iconPath" "$NOMICONE_" "$DESKTOP" "$PLAYONLINUX/playonlinux --run \"$NOMICONE_\""
	fi
}
POL_SetupWindow_shortcut()
{
	POL_Debug_Warning "POL_SetupWindow_shortcut is deprecated"
	POL_Shortcut "$@"
}
POL_Shortcut()
{
	# 1 = Binaire
	# 2 = Nom du raccourcis
	# 3 = Eventuel Icone
	# 4 = Eventuel argument

	Binaire="$1"
	SpecialArg="$4"
	
	if [ "$2" = "" ]
	then
		NOMICONE_="$1"
	else
		NOMICONE_="$2"
	fi
	
	mkdir -p "$REPERTOIRE/icones/32"
	mkdir -p "$REPERTOIRE/icones/full_size"
	
	ICON_WEB_NAME="$3"
	ICON_OK=0

	## On chope le dossier du binaire
	cd "$WINEPREFIX" || POL_Debug_Fatal "Prefixe $WINEPREFIX does not exists"
	cd drive_c || POL_Debug_Fatal "drive_c folder does not exists"
	binary_path=$(find ./ -iname "$Binaire" | tail -n 1)
	binary_dir=$(dirname "$binary_path")
	Binaire=$(basename "$binary_path")
	[ "$binary_dir" = "" ] && POL_Debug_Fatal "Can't find $Binaire"

	if [ -n "$ICON_WEB_NAME" ]; then
		if [ ! "$OFFLINE" = "1" ]; then # On peut le télécharger...
			wget -q "$SITE/icones/$ICON_WEB_NAME" -O- > "$REPERTOIRE/icones/full_size/$NOMICONE_" || rm "$REPERTOIRE/icones/full_size/$NOMICONE_"  # On prend l'icone full size
		fi
		
		if [ -f "$REPERTOIRE/icones/full_size/$NOMICONE_" ]; then
			convert -resize 32 "$REPERTOIRE/icones/full_size/$NOMICONE_" "$REPERTOIRE/icones/32/$NOMICONE_" # On fabrique l'icone 32*32
			ICON_OK=1
		fi
	elif [ "$ICON_OK" -ne 1 ]; then # Pas d'incone sur le web => Création à partir de l'exe...
		echo "No internet icon..."
		
		POL_ExtractIcon "$WINEPREFIX/drive_c/$binary_dir/$Binaire" "$REPERTOIRE/icones/32/$NOMICONE_"
			
		# On ne crée pas d'icone "full_size", parce que les résolutions des icones windows ne sont pas suffisantes tout le temps.
		# Pour verifier la taille des icones, il faudrait utiliser "identify", mais ce programme n'est pas toujours fournis.
	fi

	## On génère le binaire 
	echo "#!/bin/bash" > "$REPERTOIRE/configurations/installed/$NOMICONE_"
	echo "export WINEPREFIX=\"$WINEPREFIX\"" >> "$REPERTOIRE/configurations/installed/$NOMICONE_"
	echo "export WINEDEBUG=\"-all\"" >> "$REPERTOIRE/configurations/installed/$NOMICONE_"
	[ ! "$LOGTITLE" = "" ] && echo "POL_Log=$LOGTITLE" >> "$REPERTOIRE/configurations/installed/$NOMICONE_"
	echo "cd \"$WINEPREFIX/drive_c/$binary_dir\"" >> "$REPERTOIRE/configurations/installed/$NOMICONE_"
	echo "wine \"$Binaire\" $SpecialArg \$@" >> "$REPERTOIRE/configurations/installed/$NOMICONE_"
	chmod +x "$REPERTOIRE/configurations/installed/$NOMICONE_"
	if [ "$POL_OS" = "Mac" ]
	then
		POL_SetupWindow_AutoApp "$2"	
	else
		if [ -f "$REPERTOIRE/icones/full_size/$NOMICONE_" ]; then # L'icone existe...
			iconPath="$REPERTOIRE/icones/full_size/$NOMICONE_"
		else
			iconPath="$PLAYONLINUX/etc/playonlinux.png"
		fi
		generer_icone "$iconPath" "$NOMICONE_" "$DESKTOP" "$PLAYONLINUX/playonlinux --run \"$NOMICONE_\""
	fi
}

POL_SetupWindow_Close ()
{
	if [ "$POL_SCRIPT_FAILED" = "YES" ] && [ ! "$LOGTITLE" = "" ] && [ ! "$DEBUGGING" = "" ]
	then
		POL_SetupWindow_question "$(eval_gettext "An error occured during the installation process\n\nDo you want to send the bug to $APPLICATION_TITLE ?")" "$TITLE"
		if [ "$APP_ANSWER" = "TRUE" ]
		then
			export LOGTITLE
			bash "$PLAYONLINUX/bash/bug_report" &
		fi
	fi
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
exit
EOF
}

POL_SetupWindow_Init ()
{
	if [ "$1" = "" ]
	then
		arg1="None"
	else 
		arg1="$1"
	fi
	if [ "$2" = "" ]
	then
		arg2="None"
	else
		arg2="$2"
	fi
	
	mkdir -p "$REPERTOIRE/configurations/guis/"
	echo "Wait" > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
	cat << EOF > "$REPERTOIRE/configurations/guis/index_$POL_ID"
Open
$POL_SetupWindow_ID
$arg1
$arg2
$$
EOF

}

POL_SetupWindow_reboot ()
{
	POL_SetupWindow_wait_next_signal "$(eval_gettext 'Please wait while $APPLICATION_TITLE is simulating a Windows reboot')" "Wine"
	wine wineboot
	POL_SetupWindow_detect_exit
}
POL_SetupWindow_cdrom () 
{
	# 1 = Numéro du CD
	LIST_DEVICES_=""
	
	[ "$POL_OS" = "Mac" ] && DEVICES="/Volumes"
	[ "$POL_OS" = "Linux" ] && DEVICES="/media"
	
	cd "$DEVICES"
	for device in *
	do
		if [ ! "$device" = "$LNG_OTHER" ]
		then
				LIST_DEVICES_+="$device~"
		fi
	done
		
	LNG_WINE_ASKFORCDROM=$(eval_gettext "Where is mounted your CD-ROM?")
	LNG_OTHER=$(eval_gettext "Other")
	LNG_REFRESH=$(eval_gettext "Refresh")
	POL_SetupWindow_menu "$LNG_WINE_ASKFORCDROM" "CD-ROM" "$LIST_DEVICES_$LNG_OTHER~$LNG_REFRESH" "~"		
	CDROM="$APP_ANSWER"
	if [ "$CDROM" = "$LNG_OTHER" ]
	then
		POL_SetupWindow_textbox "$LNG_WINE_ASKFORCDROM" "CD-ROM" "$DEVICES/cdrom"
		CDROM="$APP_ANSWER"
	elif [ "$CDROM" = "$LNG_REFRESH" ]
	then
		POL_SetupWindow_cdrom
	else
		CDROM="$DEVICES/$CDROM"
	fi


	if [ "$CDROM" = "" ]
	then
		CDROM="$DEVICES/cdrom"
	fi
}
POL_SetupWindow_check_cdrom ()
{
	while [ "$(find "$CDROM" -iwholename "$CDROM/$1")" = "" ]
	do
		POL_SetupWindow_message "$(eval_gettext "Error: Unable to find the CD-ROM!")" "CD-ROM"
		POL_SetupWindow_cdrom
	done
}
POL_SetupWindow_install_wine_linux ()
{
	rm "$REPERTOIRE/WineVersions/installed" 2> /dev/null
	ARCHITECTURE="i386"
	VERSIONENTRER="$1"

	if [ "$VERSIONENTRER" = "" ]
	then
		exit
	fi
	if [ ! -e "$REPERTOIRE/WineVersions/$VERSIONENTRER" ]
	then
		VERSION="$VERSIONENTRER"
		ADRESSEDUDEB=$(wget "http://mulx.playonlinux.com/wine/linux-i386/LIST" -O- | grep ";$VERSION;" | tail -n 1 | cut -d ";" -f1)
		if [ "$ADRESSEDUDEB" = "" ]
		then
		 POL_SetupWindow_message "$(eval_gettext "Unable to find version: ")$VERSIONENTRER" "Wine $1"
		 POL_SetupWindow_Close
		 exit
		fi

		cd "$REPERTOIRE/tmp"
		POL_SetupWindow_download "$(eval_gettext "Downloading Wine: ")$VERSIONENTRER" "Wine" "http://mulx.playonlinux.com/wine/linux-i386/$ADRESSEDUDEB"
		POL_SetupWindow_wait_next_signal "$(eval_gettext "Downloading Wine: ")$VERSIONENTRER" "Wine"
		sleep 1
		sha1=$(wget "http://mulx.playonlinux.com/wine/linux-i386/$ADRESSEDUDEB.sha1" -O- | awk '{print $1}')
		sha1_file=$(sha1sum "./$ADRESSEDUDEB" | awk '{print $1}')
		echo "Server sha1 : $sha1"
		echo "Client sha1 : $sha1_file"

		POL_SetupWindow_detect_exit
		if [ ! "$sha1" = "$sha1_file" ]
		then
			POL_SetupWindow_message "$(eval_gettext 'The download seems to have failed.')" "Wine $1"
			touch "$REPERTOIRE/WineVersions/failed"
		else
			POL_SetupWindow_wait_next_signal "$(eval_gettext 'Extracting Wine...')" "Wine $1"
			"$PLAYONLINUX/playonlinux-pkg" -i "$ADRESSEDUDEB"
			POL_SetupWindow_detect_exit
			touch "$REPERTOIRE/WineVersions/installed"
		fi
		rm "$ADRESSEDUDEB"
	fi
}
POL_SetupWindow_install_wine_mac ()
{
	rm "$REPERTOIRE/WineVersions/installed" 2> /dev/null
	ARCHITECTURE="i386"
	VERSIONENTRER="$1"

	if [ "$VERSIONENTRER" = "" ]
	then
		exit
	fi
	if [ ! -e "$REPERTOIRE/WineVersions/$VERSIONENTRER" ]
	then
		VERSION="$VERSIONENTRER"
		ADRESSEDUDEB=$(wget "http://wine.playonlinux.com/darwin-i386/LIST" -O- | grep ";$VERSION;" | tail -n 1 | cut -d ";" -f1)
		if [ "$ADRESSEDUDEB" = "" ]
		then
		 LNG_ERROR_WINE="$(eval_gettext 'Unable to find the version:')"
		 POL_SetupWindow_message "$LNG_ERROR_WINE $VERSIONENTRER" "Wine $1"
		 POL_SetupWindow_Close
		 exit
		fi

		LNG_WINEVERSIONS_DOWNLOADING="$(eval_gettext 'Downloading Wine: ')"
		cd "$REPERTOIRE/tmp"
		POL_SetupWindow_download "$LNG_WINEVERSIONS_DOWNLOADING $VERSIONENTRER" "Wine" "http://wine.playonlinux.com/darwin-i386/$ADRESSEDUDEB"
		POL_SetupWindow_wait_next_signal "$LNG_WINEVERSIONS_DOWNLOADING $VERSIONENTRER" "Wine"
		sleep 1


		POL_SetupWindow_detect_exit
		POL_SetupWindow_wait_next_signal "$(eval_gettext 'Extracting Wine...')" "Wine $1"
		cd "$REPERTOIRE/WineVersions"
		tar -xvf "$REPERTOIRE/tmp/$ADRESSEDUDEB" > /dev/null
		POL_SetupWindow_detect_exit
	
		rm "$REPERTOIRE/tmp/$ADRESSEDUDEB"
	fi
	touch "$REPERTOIRE/WineVersions/installed"
}
POL_SetupWindow_install_wine ()
{
	[ "$POL_OS" == "Linux" ] && POL_SetupWindow_install_wine_linux "$@"
	[ "$POL_OS" == "Mac" ] && POL_SetupWindow_install_wine_mac "$@"
	
}
POL_GetSetupImages () # ( optional : --erase ) 
{
	# This function helps you to manage your setup images
	# It will download images only once, except if you use --erase
	#
	# 1 - Top image url
	# 2 - Left image url
	# 3 - Name (only alpha-numerical please)
	# 
	# Path of images are returned in $POL_SetupWindow_LeftImage and $POL_SetupWindow_TopImage

	if [ "$1" == "--force" ]
	then
		left="$3"
		top="$2"
		name="$4"
	else
		left="$2"
		top="$1"
		name="$3"
	fi	
	mkdir -p "$POL_USER_ROOT/configurations/setups/$name"
	cd "$POL_USER_ROOT/configurations/setups/$name"

	if [ "$1" == "--force" ] || [ ! -e "top" ]
	then
		wget -q --timeout=10 "$top" -O top 2> /dev/null && POL_SetupWindow_TopImage="$PWD/top" || export POL_SetupWindow_TopImage="$PLAYONLINUX/etc/setups/default/top.png"
		if [ "$POL_SetupWindow_TopImage" = "$PLAYONLINUX/etc/setups/default/top.png" ]
		then
			rm -f top
		fi
	else
		POL_SetupWindow_TopImage="$PWD/top"
	fi

	if [ "$1" == "--force" ] || [ ! -e "left" ]
	then
		wget -q --timeout=10 "$left" -O left 2> /dev/null && POL_SetupWindow_LeftImage="$PWD/left" || export POL_SetupWindow_LeftImage="$PLAYONLINUX/etc/setups/default/left.jpg"
		if [ "$POL_SetupWindow_LeftImage" = "$PLAYONLINUX/etc/setups/default/left.jpg" ]
		then
			rm -f left
		fi
	else
		POL_SetupWindow_LeftImage="$PWD/left"
	fi
	cd "$OLDPWD"

}

POL_SetupWindow_InitWithImages ()
{
	POL_SetupWindow_Init "$POL_SetupWindow_TopImage" "$POL_SetupWindow_LeftImage"
}



## Mac OS .app
make_skeleton()
{
	mkdir -p "$DIRAPP"
	mkdir -p "$DIRAPP/Contents/MacOS"
	mkdir -p "$DIRAPP/Contents/Resources"
	
	printf "APPL????" > "$DIRAPP/Contents/PkgInfo"
	touch "$DIRAPP/Contents/MacOS/playonmac"
	chmod +x "$DIRAPP/Contents/MacOS/playonmac"
}
make_standalone_script()
{
# 1 - Application
substitute=$(printf "$2" | sed 's/\//\\\//g' | sed 's/ /\\ /g') # ca aussi j'aime
substitute2=$(printf "$2" | sed 's/\/\//\//g' | sed 's/\//\\\//g' | sed 's/ /\\ /g') # ca aussi j'aime

echo $substitute
cat << EOF3 > "$DIRAPP/Contents/MacOS/playonmac"
#!/bin/bash
apple_message()
{
	cat << EOF > /tmp/message.applescript
tell app "Finder" to display dialog "\$1" buttons "Ok"
EOF
osascript /tmp/message.applescript
}


dir=\$(dirname "\$0")
cd "\$dir"
export SCRIPTDIR="\$PWD"
export OSX_VERSION="\$(uname -r | awk -F '.' '{print \$1}')"

if [ "\$OSX_VERSION" -lt 9 ]
then
	apple_message "Your Mac OS X version is too old to use PlayOnMac"
	exit 0
fi

export PATH="\$SCRIPTDIR/../Resources/wine/bin:\$PATH"
export LD_LIBRARY_PATH="\$SCRIPTDIR/../Resources/wine/lib:\$LD_LIBRARY_PATH"
export WINEPREFIX="\$SCRIPTDIR/../Resources/virtual_drive"
$(cat "$REPERTOIRE/configurations/installed/$1" | grep "cd " | sed s/$substitute/'\$SCRIPTDIR\/..\/Resources\/virtual_drive'/)
shift
#$(cat "$REPERTOIRE/configurations/installed/$1" | grep "wine " | sed s/$substitute2// | sed s/$substitute//) &
wine "$(basename "$(cat "$REPERTOIRE/configurations/installed/$1" | grep "wine " | cut -d \" -f2)")" \$@ &

EOF3

}
make_pom_script()
{
# 1 - Application
cat << EOF2 > "$DIRAPP/Contents/MacOS/playonmac"
#!/bin/bash
apple_message()
{
	cat << EOF > /tmp/message.applescript
tell app "Finder" to display dialog "\$1" buttons "Ok"
EOF
osascript /tmp/message.applescript
}

run_xquartz()
{
	"/opt/X11/bin/XQuartz"&
	sleep 5
	quartz-wm&
}

export PLAYONLINUX="$PLAYONLINUX"
export LANG="$(defaults read -g AppleLocale).utf-8"
export POL_LANG="$(defaults read -g AppleLocale | cut -d _ -f1)"
export REPERTOIRE="$REPERTOIRE"
export PLAYONMAC="\$PLAYONLINUX"
export POL_USER_ROOT="\$REPERTOIRE"

dir=\$(dirname "\$0")
cd "\$dir"
#[ "\$(cat "\$REPERTOIRE/configurations/options/applex")" = "1" ] && export FORCE_NATIVE_X="TRUE"
export RDISPLAY="\$DISPLAY"
export OSX_VERSION="\$(uname -r | awk -F '.' '{print \$1}')"
[[ "\$OSX_VERSION" -lt 10 ]] && export OSX_TOO_OLD="TRUE"
#export DISPLAY=":0.0" 
#[ -d "/opt/X11" ] && [ ! -L "/opt/X11" ] && export DISPLAY="\$RDISPLAY" # Non-PlayOnMac XQuartz
#[ "\$OSX_TOO_OLD" = "TRUE" ] && export DISPLAY="\$RDISPLAY"
#[ "\$FORCE_NATIVE_X" = "TRUE" ] && export DISPLAY="\$RDISPLAY"

#readonly DISPLAY

if [ "\$OSX_VERSION" -lt 9 ]
then
	apple_message "Your Mac OS X version is too old to use PlayOnMac"
	exit 0
fi

if [ ! -e "\$PLAYONLINUX" ]
then
	apple_message "Error ! Unable to find \$PLAYONLINUX"
	exit 0
fi

#[ ! "\$FORCE_NATIVE_X" = "TRUE" ] && [ ! "\$OSX_TOO_OLD" = "TRUE" ] && run_xquartz
export PATH="\$PLAYONLINUX/../unix/wine/bin:\$PLAYONLINUX/../unix/image_magick/bin:\$PLAYONLINUX/../unix/tools/bin/:\$PATH"
export LD_LIBRARY_PATH="\$PLAYONLINUX/../unix/wine/lib:\$PLAYONLINUX/../unix/tools/lib:/usr/X11/lib:\$LD_LIBRARY_PATH"

cd "\$REPERTOIRE/configurations/installed"
shift
bash "$1" \$@ &
EOF2

}
make_icon()
{
	# 1 - Icon Name
	rm /tmp/icon.png
	if [ -e "$REPERTOIRE/icones/full_size/$1" ]
	then
		icon_app="$REPERTOIRE/icones/full_size/$1"
		cp "$icon_app" "/tmp/icon2.png"
		convert "/tmp/icon2.png" -resize 128x128\! "/tmp/icon.png"
		png2icns "$DIRAPP/Contents/Resources/playonmac.icns" "/tmp/icon.png" && success=true
	fi
	if [ ! "$success" = "true" ]
	then
		if [ -e "$REPERTOIRE/icones/32/$1" ]
		then
			icon_app="$REPERTOIRE/icones/32/$1"
			cp "$icon_app" "/tmp/icon2.png"
			convert "/tmp/icon2.png" -resize 32x32\! "/tmp/icon.png"
			png2icns "$DIRAPP/Contents/Resources/playonmac.icns" "/tmp/icon.png" && success=true
		fi
	fi
	
	if [ ! "$success" = "true" ] 
	then
		cp "$PLAYONLINUX/etc/playonmac.icns" "$DIRAPP/Contents/Resources/playonmac.icns"	
	fi
	
	if [ ! -e "$DIRAPP/Contents/Resources/playonmac.icns" ]
	then
		cp "$PLAYONLINUX/etc/playonmac.icns" "$DIRAPP/Contents/Resources/playonmac.icns"
	fi
}
make_plist()
{
	# 1 - Real Name
	# 2 - Short name
	cat << EOF > "$DIRAPP/Contents/Info.plist"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>English</string>
	<key>CFBundleDisplayName</key>
	<string>$1</string>
	<key>CFBundleExecutable</key>
	<string>playonmac</string>
	<key>CFBundleIconFile</key>
	<string>playonmac.icns</string>
	<key>CFBundleIdentifier</key>
	<string>org.playonmac.$2</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$1</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>1.0</string>
	<key>LSHasLocalizedDisplayName</key>
	<true/>
	<key>NSAppleScriptEnabled</key>
	<false/>
	<key>NSHumanReadableCopyright</key>
	<string>Copyright not specified</string>
	<key>NSMainNibFile</key>
	<string>MainMenu</string>
	<key>NSPrincipalClass</key>
	<string>NSApplication</string>
</dict>
</plist>
EOF
}
## End Mac OS
POL_SetupWindow_login ()
{
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
Login
$1
$2
EOF
		
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$' 2> /dev/null)
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		[ ! -e "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" ] && exit
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$' 2> /dev/null)
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=' 2> /dev/null)
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	else
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^LOGIN=' 2> /dev/null)
		MESSAGE_TER=${MESSAGE_TER:6}
		export POL_LOGIN="$MESSAGE_TER"
		
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^PASS=' 2> /dev/null)
		MESSAGE_TER=${MESSAGE_TER:5}
		export POL_PASSWORD="$MESSAGE_TER"
		
		
	fi
}
POL_SetupWindow_file ()
{
	if [ -f "$3" ]
	then
		cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
file
$1
$2
$3
EOF
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$' 2> /dev/null)
		while [ ! "$MESSAGE" = "MsgOut" ]
		do
			[ ! -e "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" ] && exit
			MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$' 2> /dev/null)
			sleep 0.1
		done
		MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=' 2> /dev/null)
		if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
		then
			rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
			exit 
		fi
	fi
}
POL_SetupWindow_textbox_multiline ()
{
	cat << EOF > "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
MsgIn
bigchamp
$1
$2
$3
EOF
		
	MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$' 2> /dev/null)
	while [ ! "$MESSAGE" = "MsgOut" ]
	do
		[ ! -e "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" ] && exit
		MESSAGE=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MsgOut$' 2> /dev/null)
		sleep 0.1
	done
	MESSAGE_BIS=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID" | grep '^MSG_RECEIVED=' 2> /dev/null)
	if [ "$MESSAGE_BIS" = "MSG_RECEIVED=Cancel" ]
	then
		rm "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID"
		exit 
	else
		MESSAGE_TER=$(cat "$REPERTOIRE/configurations/guis/$POL_SetupWindow_ID.txt")
		export APP_ANSWER="$MESSAGE_TER"
	fi
}

POL_Website_login()
{
	POL_SetupWindow_login "$(eval_gettext "Connect to your $APPLICATION_TITLE account")" "$TITLE" 
	POL_Website_check_login
}
POL_Website_logout()
{
	export POL_LOGIN=""
	export POL_PASSWORD=""
}
POL_Website_Init()
{
cat << EOF > "$REPERTOIRE/login_info"
# HTTP cookie file.
# Edit at your own risk.

.playonlinux.com	TRUE	/	FALSE	0	pass	$(POL_MD5 $POL_PASSWORD)
.playonlinux.com	TRUE	/	FALSE	0	login	$POL_LOGIN
.playonmac.com	TRUE	/	FALSE	0	pass	$(POL_MD5 $POL_PASSWORD)
.playonmac.com	TRUE	/	FALSE	0	login	$POL_LOGIN
EOF
}
POL_Website_urlencode() # Un peu violente celle la
{
arg="$@"
i="0"
while [ "$i" -lt ${#arg} ]; do
        c=${arg:$i:1}
        if echo "$c" | grep -q '[0-9a-zA-Z]'; then
                echo -n "$c"
        else
                printf %%%02X \'"$c"
        fi
        i=$((i+1))
done
}
POL_Website_urlparse()
{
	# & %26
	# = %3D
	chars="$1"
	chars="${chars//"&"/\%26}"
	chars="${chars//"="/%3D}"
	echo "$chars"
}
POL_Website_Close()
{
	rm "$REPERTOIRE/login_info"
}
POL_Website_Request()
{
	wget "$1" --post-data="$2" --load-cookies "$REPERTOIRE/login_info" -O- -q > "$POL_USER_ROOT/tmp/POL_Website_data"
}
POL_Website_POST()
{
	POL_Website_Request "$@"
}
POL_Website_GET()
{
	wget "$1" --load-cookies "$REPERTOIRE/login_info" -O- -q > "$POL_USER_ROOT/tmp/POL_Website_data"
}
POL_Website_Result()
{
	cat "$POL_USER_ROOT/tmp/POL_Website_data"
}
POL_Website_check_login()
{
	POL_SetupWindow_wait_next_signal "$(eval_gettext "Connecting...")" "$TITLE"

	result="$(wget -q http://repository.playonmac.org/V3_data/repository/check_login.php?l=$POL_LOGIN\&p=$POL_PASSWORD -O-)"
	if [ "$result" = "0" ]
	then
		POL_SetupWindow_message "$(eval_gettext "Failed to connect !\nPlease ensure that your login and your password are valid.")" "$TITLE"
		POL_Website_login
	fi
}
process_POL_SetupWindow_show_exe ()
{
	read line
	first=true
	while [ ! "$line" = "" ]
	do
		[ "$first" = "true" ] && first=false || printf "~"
		printf "$(basename "$line")"
		read line
	done
}
POL_SetupWindow_show_exe ()
{
	cd "$WINEPREFIX/drive_c"
	POL_SetupWindow_wait_next_signal "$(eval_gettext "Scanning the virtual drive ...")" "$2"
	contents="$(find . -iname *.exe | grep -v "./windows" | grep -v iexplore.exe | process_POL_SetupWindow_show_exe)"
	POL_SetupWindow_menu "$1" "$2" "$contents" "~"
}
POL_Download ()
{
	POL_Debug_Message "Downloading $1"
	# 1 - URL
	# 2 - MD5 SUM
	URL="$1"
	FICHIER="${URL##*/}"
	if [ "$URL" = "" ]
	then
		POL_Debug_Error "POL_Download - URL is missing !"
	else
		POL_SetupWindow_download "$(eval_gettext "Please wait while $APLICATION_TITLE is downloading:") $FILENAME" "$TITLE" "$URL"
		if [ "$2" = "" ]
		then
			POL_Debug_Warning "POL_Download - MD5 is missing !"
		else
			LOCAL_MD5="$(POL_MD5_file "$FICHIER")"
			if [ ! "$2" = "$LOCAL_MD5" ]
			then
				POL_SetupWindow_message "Error ! Files mismatch\n\nLocal : $LOCAL_MD5\nServer : $2"
				POL_Debug_Error "POL_Download - MD5 sum mismatch !"
			fi
		fi	
	fi
}
POL_Download_Resource ()
{
	POL_Debug_Message "Downloading resource $1"
	# 1 - URL
	# 2 - MD5 SUM
	URL="$1"
	FICHIER="${URL##*/}"
	cd "$POL_USER_ROOT/ressources"
	if [ -e "$FICHIER" ] || [ ! "$(POL_MD5_file "$FICHIER")" = "$2" ]
	then
		if [ "$URL" = "" ]
		then
			POL_Debug_Error "POL_Download - URL is missing !"
		else
			rm "$FICHIER"
			POL_SetupWindow_download "$(eval_gettext "Please wait while $APLICATION_TITLE is downloading:") $FILENAME" "$TITLE" "$URL"
			if [ "$2" = "" ]
			then
				POL_Debug_Warning "POL_Download - MD5 is missing !"
			else
				LOCAL_MD5="$(POL_MD5_file "$FICHIER")"
				if [ ! "$2" = "$LOCAL_MD5" ]
				then
					POL_SetupWindow_message "Error ! Files mismatch\n\nLocal : $LOCAL_MD5\nServer : $2"
					POL_Debug_Error "POL_Download - MD5 sum mismatch !"
				fi
			fi	
		fi
	fi
}
POL_SetupWindow_VMS ()
{
	[ "$WINEPREFIX" = "" ] && POL_Debug_Fatal "WINEPREFIX is not set !"
	VMS="$(POL_Config_Read VMS)"
	if [ "$VMS" = "" ]
	then
		POL_SetupWindow_menu "$(eval_gettext "How much memory does your graphics board have?")" "$TITLE" "32~64~128~256~384~512~768~1024~2048~3072~4096" "~"
		VMS="$APP_ANSWER"
		POL_Config_Write VMS $APP_ANSWER
	fi
	POL_Wine_Direct3D "VideoMemorySize" "$VMS"
	if [ ! "$1" = "" ]
	then
		if [ $VMS -lt $1 ]
		then
			POL_Debug_Warning "$(eval_gettext "Video card does not have enough memory")" "$TITLE"
			POL_SetupWindow_Message "$(eval_gettext "Your video card does not have enough memory!\nIt might prevent the game from working")" "$TITLE"
		fi
	fi
}

POL_SetupWindow_InstallMethod()
{
	[ "$1" = "" ] && POL_Debug_Fatal "No method in list"
	STR=""
	ICO=""
	LNG_STEAM="$(eval_gettext "Use Steam Store version")"
	LNG_STEAM_DEMO="$(eval_gettext "Use Steam Store demo version")"
	LNG_LOCAL="$(eval_gettext "Use a setup file in my computer")"
	LNG_CDROM="$(eval_gettext "Use CD-ROM(s)")"
	LNG_DVD="$(eval_gettext "Use DVD-ROM(s)")"
	LNG_DOWNLOAD="$(eval_gettext "Download the program")"
	
	if [ ! "$(printf "$1" | grep LOCAL)" = "" ] 
	then 
		STR="$STR~$LNG_LOCAL"
		ICO="$ICO~browse.png"
	fi
	if [ ! "$(printf "$1" | grep CD)" = "" ] 
	then 
		STR="$STR~$LNG_CDROM"
		ICO="$ICO~cdrom.png"
	fi
	if [ ! "$(printf "$1" | grep DVD)" = "" ] 
	then 
		STR="$STR~$LNG_DVD"
		ICO="$ICO~cdrom.png"
	fi
	if [ ! "$(printf "$1" | grep STEAM)" = "" ] 
	then 
		STR="$STR~$LNG_STEAM"
		ICO="$ICO~download.png"
	fi
	if [ ! "$(printf "$1" | grep STEAM_DEMO)" = "" ] 
	then 
		STR="$STR~$LNG_STEAM_DEMO"
		ICO="$ICO~download.png"
	fi
	if [ ! "$(printf "$1" | grep DOWNLOAD)" = "" ] 
	then 
		STR="$STR~$LNG_DOWNLOAD"
		ICO="$ICO~download.png"
	fi
	
	STR="${STR:1}"
	ICO="${ICO:1}"
	
	mkdir -p "$POL_USER_ROOT/tmp/cache/icons/InstallMethod"
	cp "$PLAYONLINUX/resources/images/icones/browse.png" "$POL_USER_ROOT/tmp/cache/icons/InstallMethod"
	cp "$PLAYONLINUX/resources/images/icones/cdrom.png" "$POL_USER_ROOT/tmp/cache/icons/InstallMethod"
	cp "$PLAYONLINUX/resources/images/icones/download.png" "$POL_USER_ROOT/tmp/cache/icons/InstallMethod"
	
	POL_SetupWindow_icon_menu "$(eval_gettext "Please choose an installation method")" "$TITLE"  "$STR" "~" "$POL_USER_ROOT/tmp/cache/icons/InstallMethod" "$ICO"
	
	[ "$APP_ANSWER" = "$LNG_LOCAL" ] && INSTALL_METHOD="LOCAL"
	[ "$APP_ANSWER" = "$LNG_STEAM" ] && INSTALL_METHOD="STEAM"
	[ "$APP_ANSWER" = "$LNG_STEAM_DEMO" ] && INSTALL_METHOD="STEAM_DEMO"
	[ "$APP_ANSWER" = "$LNG_DOWNLOAD" ] && INSTALL_METHOD="DOWNLOAD"
	[ "$APP_ANSWER" = "$LNG_DVD" ] && INSTALL_METHOD="DVD"
	[ "$APP_ANSWER" = "$LNG_CDROM" ] && INSTALL_METHOD="CD"
	
	
	POL_Debug_Message "Install method : $INSTALL_METHOD"
}
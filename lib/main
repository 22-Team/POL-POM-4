#!/bin/bash

# Copyright (C) 2007-2010 PlayOnLinux Team
# Copyright (C) 2008 Pâris Quentin
# Copyright (C) 2009 Łukasz Wojniłowicz

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 551 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. 


install_plugins () # Install defaults plugin into home directory
{
	
	#declaration de variables locale
	#le P c'est pour euh POL/Package/?
	local Puid Pfichier PinstDir PplugStatus PverStr Pversion plugStatus
	#la le U par contre c'est pour user
	local Uuid Ufichier UinstDir UplugStatus UverStr Uversion Uligne
	# _2 parce que avant c'était pas pareil 
	readonly ULST=$POL_USER_ROOT/configurations/plugins_2
	touch $ULST

	#lecture du fichier ligne/ligne
	while read ligne
	do
		#sauter les lignes qui commence par #
		grep -q '^#' <<< $ligne && continue
		#et les lignes vides ... parce que ça fait plus propre
		grep -q '^$' <<< $ligne && continue

		#paf pif split!
		Puid=$(cut -d';' -f1 <<< $ligne)
		Pfichier=$(cut -d';' -f2 <<< $ligne)
		PinstDir=$(cut -d';' -f3 <<< $ligne)
		PplugStatus=$(cut -d';' -f4 <<< $ligne)
		PverStr=$(cut -d';' -f5 <<< $ligne)
		Pversion=$(cut -d';' -f6 <<< $ligne)
		Plinux=$(cut -d';' -f7 <<< $ligne)
		Pmac=$(cut -d';' -f8 <<< $ligne)

		# On complique un peu le truc (07/07/2011)
		install="false"
		[ "$POL_OS" = "Linux" ] && [ "$Plinux" = "1" ] && install="true"
		[ "$POL_OS" = "Mac" ] && [ "$Pmac" = "1" ] && install="true"
		
		if [ "$install" = "true" ]
		then
		[ "$SILENT" = "TRUE" ] || POL_Debug_Message "$(eval_gettext "Checking plugin: ")$PinstDir..."
		
		Uligne=$(grep "^$Puid;" $ULST)
		#tres important le ; !
		
		plugStatus="$PplugStatus" #ouai ouai c'est débile d'utiliser 2 variables pour la même chose :D

		#chk si la ligne existe déjà
		if [ -n "$Uligne" ] ; then
			#oui

			#la même mais avec un U =) 
			#y a des trucs dont on se fiche mais bon c/c is great
			Uuid=$(cut -d';' -f1 <<< $Uligne)
			Ufichier=$(cut -d';' -f2 <<< $Uligne)
			UinstDir=$(cut -d';' -f3 <<< $Uligne)
			UplugStatus=$(cut -d';' -f4 <<< $Uligne)
			UverStr=$(cut -d';' -f5 <<< $Uligne)
			Uversion=$(cut -d';' -f6 <<< $Uligne)

			#chk version
			#si la version du P est la même ou plus old que l'U on passe au plugin suivant
			[ $Pversion -gt $Uversion ] || continue

			#bon ben la c'est sur le gus a vieux truc
				[ "$SILENT" = "TRUE" ] || POL_Debug_Message "   -->$(eval_gettext 'Updating plugin. Previous: ')'$UverStr'/$Uversion. $(eval_gettext 'New: ')'$PverStr'/$Pversion."
			
			#est ce que le plugin était déjà actif?
			#UplugStatus="disable"
			[ -f "$POL_USER_ROOT/plugins/$UinstDir/enabled" ] && plugStatus="enable"
			#la c'est barbare ... si déjà actif on force l'update actif ...
			#sinon dépend du plugins.lst


			#on vire l'ancienne installation (utile si le plugin change de place)
			#les perdants sont les plugins qui gardent des fichiers de config dans leur dossier ... tant pis pour eux
			rm -rf "$POL_USER_ROOT/plugins/$UinstDir/"

			#on vire la ligne dans le fichier utilisateur 
			grep -v "^$Puid;" "$ULST" > "$POL_USER_ROOT/tmp/ulst.tmp"
			mv -f "$POL_USER_ROOT/tmp/ulst.tmp" "$ULST"
			#voilà ménage fait plus qu'à installer
		fi

		[ "$SILENT" = "TRUE" ] || POL_Debug_Message "   -->$(eval_gettext "Installing plugin: ")'$PinstDir'."
		#là on installe
		"$PLAYONLINUX/playonlinux-pkg" -i "$PLAYONLINUX/plugins/$Pfichier" > /dev/null

		## =~ ok pour enable et enabled
		#active or nto
		if [[ "$plugStatus" =~ "enable" ]]
		then
			touch "$POL_USER_ROOT/plugins/$PinstDir/enabled"
		fi

		#et on enregistre qu'on vient de faire
		echo "$Puid;$Pfichier;$PinstDir;$plugStatus;$PverStr;$Pversion" >> $ULST
	fi
	#est voilà on continue .... et moi j'ai fait cramer mes patates
	done < $PLAYONLINUX/plugins/plugins.lst
}
construire_repertoire_personnel ()
{
	mkdir -p "$REPERTOIRE/wineprefix/"
	mkdir -p "$REPERTOIRE/configurations/installed/"
	mkdir -p "$REPERTOIRE/configurations/options/"
	mkdir -p "$REPERTOIRE/configurations/icones/"
	mkdir -p "$REPERTOIRE/configurations/messages_shown/"
	mkdir -p "$REPERTOIRE/tmp"
	mkdir -p "$REPERTOIRE/logs"
	mkdir -p "$REPERTOIRE/ressources"
	mkdir -p "$REPERTOIRE/icones/full_size"
	mkdir -p "$REPERTOIRE/icones/32"
	mkdir -p "$REPERTOIRE/WineVersions"
	mkdir -p "$REPERTOIRE/plugins"
	mkdir -p "$REPERTOIRE/configurations/guis"
	mkdir -p "$REPERTOIRE/configurations/configurators"
	mkdir -p "$REPERTOIRE/configurations/setups"
	touch "$REPERTOIRE/configurations/last_version"
}
# Attention ! Celle la elle ne sert plus a rien
start_pol ()
{
	if [ "$1" = "--run" ]
	then
		#Arg contient tout apres l'option --run
		#Supporte le lancement de jeu avec option POL >> 1.7.5
		Arg=$(echo $@ | cut -b7-)
		Arg=${Arg//"$2"/""}
		Arg=${Arg:1}
		lancer "$2" "$Arg"
		exit 0
	elif [ "$1" = "--debug" ]
	then
		bash "$PLAYONLINUX/bash/system_info" "$1" "$2"
		#Arg contient tout apres l'option --run
		#Supporte le lancement de jeu avec option POL >> 1.7.5
		Arg=$(echo $@ | cut -b7-)
		Arg=${Arg//"$2"/""}
		Arg=${Arg:1}
		lancer "$2" "$Arg --debug"
		exit 0
	fi

	cfg_check 
	construire_repertoire_personnel
	if [ ! -d "$REPERTOIRE/configurations/listes" ]
	then
		maj_check --first
	else
		bash "$PLAYONLINUX/bash/check_maj_" &
	fi
	fonts_install
	install_plugins

	check_new_pol
	retChkNew=$?
	#retourne:
	# 0 = pas de nouvelle version
	# 1 = nouvelle version dispo
	# 2 = pas internet ?
	# 3 = version de dev utilise
	# 4 = pas le site officiel, utilisation du plugin offline ?
	#if [ ! "$NEW_VERSION" = "" ]
	if [ "$retChkNew" != "0" ]
	then
		menu_principal $retChkNew "$NEW_VERSION"
	else
		menu_principal
	fi
}
clean_tmp ()
{
	rm -rf "$REPERTOIRE/tmp/" 
	mkdir -p "$REPERTOIRE/tmp" 
}

# Idem
check_new_pol () 
{
	#retourne:
	# 0 = pas de nouvelle version
	# 1 = nouvelle version dispo
	# 2 = pas internet ?
	# 3 = version de dev utilise
	# 4 = pas le site officiel, utilisation du plugin offline ?
	local retVal=0
	if [ ! "$ALREADY_CHECK_ONLINE" ]
	then
		WebVersion=$(wget -q "$SITE/version2.php?v=$VERSION" -T 2 -O-)
		if [ "$WebVersion" = "" ]
		then
			retVal=2
		elif [ $(convertVersionToInt $WebVersion) -gt $(convertVersionToInt $VERSION) ]
		then
			export NEW_VERSION="$WebVersion"
			retVal=1
		elif [ $(convertVersionToInt $WebVersion) -lt $(convertVersionToInt $VERSION) ]
		then
			#using a dev release!
			retVal=3
		fi
		if [ "$SITE" != "http://repository.playonlinux.com/" ]
		then
			#not using POL website
			retVal=4
		fi
		export ALREADY_CHECK_ONLINE=true
	fi
	return $retVal
}

sudo ()
{
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
gksudo ()
{
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
gksu ()
{
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
su ()
{
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
kdesu ()
{
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
kdesudo ()
{
    echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}

/usr/bin/sudo ()
{
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
/usr/bin/gksudo ()
{
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
/usr/bin/gksu ()
{
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
/usr/bin/su ()
{
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
/usr/bin/kdesu ()
{
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
/usr/bin/kdesudo ()
{
    echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}

POL_Call() 
{
	POL_Debug_Message "Calling $1"
	if [ ! "$1" = "" ]
	then	
		OLD_PC_DIR="$PWD"
		cd "$REPERTOIRE/tmp/"
		wget -q "$SITE/V3_data/repository/get_file.php?version=playonlinux-$VERSION&id=$1" -O- > "$1"
		POL_Source "$@"
		cd "$OLD_PC_DIR"
	fi
}



POL_Bash ()
{
	OLD_DIR="$PWD"
	if [ "$(POL_GPG_auth_script "$1")" = "TRUE" ]
	then
		cd "$OLD_DIR"
		echo "POL GPG : Good signature - $TITLE"
		bash "$@"
	else
		cd "$OLD_DIR"
		POL_SetupWindow_Init
		POL_SetupWindow_message "Warning !!\n\nThe signature of the script you are trying to run is NOT valid\n\nPlayOnLinux has not approved this script and will not be responsible from it.\nPlease ensure you know what you are doing !" "$TITLE"
		POL_SetupWindow_licence "Here the source code of the script. Check it carrefully" "$TITLE" "$1"
		POL_SetupWindow_Close
		bash "$@"
	fi

}
POL_Source ()
{
	OLD_DIR="$PWD"
	if [ "$(POL_GPG_auth_script "$1")" = "TRUE" ]
	then
		cd "$OLD_DIR"
		echo "POL GPG : Good signature"
		source "$@"
	else
		cd "$OLD_DIR"
		POL_SetupWindow_message "Warning !!\n\nThe signature of the script you are trying to run is NOT valid\n\n$APPLICATION_TITLE has not approved this script and will not be responsible from it.\nPlease ensure you know what you are doing !" "$TITLE"
		POL_SetupWindow_licence "Here the source code of the script. Check it carrefully" "External library" "$PWD/$1"
		source "$@"
	fi

}

POL_MD5 ()
{
	if [ "$POL_OS" == "Mac" ]
	then
		printf "$1" | md5
	fi
	if [ "$POL_OS" == "Linux" ]
	then
		printf "$1" | md5sum | awk '{print $1}'
	fi
}
POL_MD5_file ()
{
	if [ "$POL_OS" == "Mac" ]
	then
		cat "$1" | md5
	fi
	if [ "$POL_OS" == "Linux" ]
	then
		cat "$1" | md5sum | awk '{print $1}'
	fi
}
POL_Open()
{
	[ "$POL_OS" == "Mac" ] && open "$@"
	[ "$POL_OS" == "Linux" ] && xdg-open "$@"
}
POL_Browser()
{
	POL_Open "$@"
}
POL_OpenShell()
{
	if [ "$1" = "" ]
	then
		cat << EOF >> "$POL_USER_ROOT/tmp/env_bash"
	export PLAYONLINUX="$PLAYONLINUX"
	export WINEPREFIX="$WINEPREFIX"
	cd "$WINEPREFIX/drive_c"
	echo "You are in $CURRENT_PREFIX wine environement"
	echo "Type source \"\\\$PLAYONLINUX/lib/sources\" to load $APPLICATION_TITLE libraries"

	bash
	EOF
	
		
	else
	cd "$POL_USER_ROOT/configurations/installed"
	cat "$1" | grep PATH > "$POL_USER_ROOT/tmp/env_bash"
	cat "$1" | grep WINEPREFIX >> "$POL_USER_ROOT/tmp/env_bash"
	cat << EOF >> "$POL_USER_ROOT/tmp/env_bash"
export PLAYONLINUX="$PLAYONLINUX"
export PATH
export LD_LIBRARY_PATH
cd "$WINEPREFIX/drive_c"
echo "You are in $1 wine environement"
echo "Type source \"\\\$PLAYONLINUX/lib/sources\" to load $APPLICATION_TITLE libraries"

bash
EOF
	fi
	xterm -e bash "$POL_USER_ROOT/tmp/env_bash" -T "$APPLICATION_TITLE"
}